{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Logging before flag parsing goes to stderr.\n",
      "W1009 21:25:39.805500  3532 deprecation.py:506] From C:\\Users\\andrew\\Anaconda3\\envs\\Neural\\lib\\site-packages\\tensorflow\\python\\ops\\init_ops.py:1251: calling VarianceScaling.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Call initializer instance with the dtype argument instead of passing it to the constructor\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "60000/60000 [==============================] - 7s 124us/sample - loss: 0.3990 - acc: 0.8836\n",
      "Epoch 2/5\n",
      "60000/60000 [==============================] - 6s 95us/sample - loss: 0.2190 - acc: 0.9357\n",
      "Epoch 3/5\n",
      "60000/60000 [==============================] - 5s 79us/sample - loss: 0.1781 - acc: 0.9478\n",
      "Epoch 4/5\n",
      "60000/60000 [==============================] - 5s 82us/sample - loss: 0.1558 - acc: 0.9534\n",
      "Epoch 5/5\n",
      "60000/60000 [==============================] - 5s 76us/sample - loss: 0.1417 - acc: 0.9572\n",
      "10000/10000 [==============================] - 0s 43us/sample - loss: 0.1043 - acc: 0.9693\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.10425006738975644, 0.9693]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "mnist = tf.keras.datasets.mnist\n",
    "(x_train, y_train),(x_test, y_test) = mnist.load_data()\n",
    "x_train, x_test = x_train / 255.0, x_test / 255.0\n",
    "model = tf.keras.models.Sequential([\n",
    "  tf.keras.layers.Flatten(input_shape=(28, 28)),\n",
    "  tf.keras.layers.Dense(50, activation=tf.nn.relu),\n",
    "  tf.keras.layers.Dropout(0.2),\n",
    "  tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n",
    "])\n",
    "model.compile(optimizer='adam',\n",
    "              loss='sparse_categorical_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "model.fit(x_train, y_train, epochs=5)\n",
    "model.evaluate(x_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[29, 80, 132, 148, 172, 224, 278, 418, 444, 470, 494, 500, 544, 635, 670, 720, 778, 850, 854, 902, 916, 995, 1030, 1032, 1055, 1075, 1079, 1088, 1111, 1127, 1137, 1138, 1201, 1222, 1244, 1324, 1352, 1357, 1375, 1376, 1404, 1461, 1512, 1604, 1674, 1784, 1814, 1920, 1940, 1968, 2030, 2044, 2098, 2220, 2426, 2554, 2622, 2671, 2676, 2720, 2764, 2803, 2831, 2901, 3010, 3034, 3204, 3290, 3367, 3432, 3510, 3512, 3522, 3612, 3682, 3691, 3692, 3696, 3798, 3814, 3907, 4028, 4050, 4122, 4142, 4153, 4201, 4253, 4258, 4276, 4334, 4373, 4476, 4502, 4636, 4638, 4640, 4654, 4694, 4762, 4935, 4955, 4968, 4986, 5002, 5013, 5103, 5174, 5192, 5216, 5278, 5298, 5308, 5332, 5368, 5370, 5482, 5538, 5616, 5684, 5704, 5771, 5798, 5821, 5842, 5845, 5868, 5896, 5936, 6066, 6102, 6130, 6202, 6254, 6269, 6347, 6448, 6466, 6498, 6636, 6658, 6755, 6771, 6810, 6816, 6844, 6848, 6885, 6920, 7006, 7010, 7030, 7036, 7080, 7136, 7219, 7264, 7270, 7308, 7350, 7438, 7530, 7596, 7599, 7606, 7620, 7638, 7722, 7784, 7842, 7851, 7886, 7994, 8009, 8093, 8120, 8200, 8202, 8228, 8278, 8298, 8347, 8428, 8449, 8468, 8480, 8491, 8639, 8693, 8712, 8714, 8728, 8729, 8772, 8790, 8821, 8853, 8854, 8857, 8883, 8898, 8904, 8966, 9008, 9075, 9078, 9098, 9104, 9164, 9220, 9290, 9344, 9419, 9433, 9448, 9513, 9814, 9870, 9948, 10042, 10048, 10064, 10116, 10146, 10205, 10211, 10239, 10312, 10358, 10644, 10726, 10756, 10779, 10800, 10852, 10884, 10944, 10992, 10994, 11039, 11074, 11104, 11210, 11234, 11295, 11482, 11488, 11501, 11534, 11570, 11578, 11583, 11639, 11657, 11702, 11705, 11767, 11781, 11797, 11940, 11949, 12028, 12063, 12078, 12153, 12183, 12268, 12361, 12368, 12372, 12377, 12416, 12501, 12551, 12559, 12585, 12603, 12623, 12650, 12679, 12692, 12701, 12702, 12752, 12768, 12812, 12820, 12830, 12834, 12884, 12900, 12950, 13018, 13025, 13080, 13127, 13185, 13259, 13376, 13410, 13449, 13452, 13538, 13655, 13658, 13677, 13680, 13703, 13713, 13752, 13782, 13829, 13831, 13854, 13912, 13920, 13969, 14008, 14062, 14074, 14078, 14120, 14286, 14329, 14333, 14337, 14342, 14357, 14367, 14374, 14385, 14440, 14506, 14546, 14582, 14650, 14665, 14740, 14756, 14760, 14790, 14894, 15024, 15106, 15108, 15167, 15276, 15324, 15352, 15420, 15434, 15532, 15558, 15610, 15724, 15728, 15766, 15769, 15771, 15778, 15820, 15842, 15862, 15893, 15942, 15991, 16011, 16031, 16045, 16100, 16290, 16446, 16488, 16560, 16572, 16627, 16658, 16676, 16678, 16706, 16771, 16795, 16809, 16875, 16939, 16941, 16980, 16981, 16997, 17010, 17039, 17055, 17082, 17112, 17129, 17190, 17200, 17220, 17222, 17401, 17406, 17417, 17472, 17478, 17551, 17593, 17594, 17714, 17728, 17772, 17820, 17890, 17908, 17958, 17988, 18003, 18056, 18190, 18293, 18348, 18398, 18487, 18504, 18598, 18654, 18704, 18720, 19031, 19064, 19089, 19112, 19124, 19211, 19244, 19272, 19328, 19360, 19362, 19501, 19502, 19590, 19756, 19782, 19814, 19828, 19868, 19942, 20016, 20018, 20072, 20088, 20171, 20206, 20224, 20226, 20304, 20350, 20569, 20641, 20652, 20672, 20709, 20720, 20735, 20756, 20773, 20784, 20792, 20820, 20853, 20869, 20903, 20962, 20967, 20976, 21034, 21046, 21066, 21102, 21112, 21134, 21150, 21204, 21302, 21348, 21370, 21445, 21517, 21576, 21598, 21601, 21606, 21686, 21889, 21896, 21944, 21990, 22033, 22094, 22140, 22149, 22155, 22177, 22204, 22481, 22497, 22505, 22559, 22561, 22584, 22595, 22615, 22633, 22643, 22704, 22799, 22804, 22866, 22884, 23089, 23184, 23212, 23366, 23385, 23400, 23406, 23486, 23490, 23588, 23618, 23629, 23674, 23698, 23724, 23730, 23733, 23812, 23824, 23911, 23927, 23956, 24038, 24084, 24125, 24145, 24210, 24258, 24274, 24278, 24284, 24310, 24360, 24424, 24512, 24608, 24613, 24614, 24662, 24703, 24719, 24725, 24798, 24803, 24870, 24934, 25096, 25159, 25176, 25232, 25262, 25482, 25546, 25562, 25622, 25624, 25662, 25678, 25722, 25783, 25799, 25800, 25874, 25945, 26017, 26072, 26150, 26184, 26293, 26358, 26376, 26455, 26471, 26504, 26513, 26515, 26527, 26542, 26544, 26560, 26588, 26626, 26629, 26640, 26722, 26748, 26760, 26778, 26882, 27085, 27155, 27157, 27172, 27176, 27180, 27194, 27219, 27225, 27248, 27254, 27427, 27429, 27468, 27502, 27522, 27576, 27602, 27661, 27674, 27696, 27780, 27791, 27793, 27838, 27846, 27966, 28136, 28162, 28357, 28374, 28392, 28491, 28556, 28642, 28710, 28778, 28788, 28930, 28932, 29029, 29062, 29132, 29206, 29238, 29264, 29311, 29320, 29341, 29361, 29372, 29379, 29381, 29434, 29440, 29444, 29476, 29530, 29570, 29588, 29662, 29672, 29704, 29730, 29827, 29831, 29890, 29938, 29960, 30037, 30049, 30095, 30123, 30130, 30262, 30308, 30356, 30493, 30508, 30566, 30604, 30659, 30660, 30692, 30720, 30751, 30776, 30872, 30900, 30953, 30962, 30968, 31011, 31046, 31068, 31134, 31185, 31197, 31198, 31252, 31289, 31295, 31301, 31310, 31345, 31347, 31428, 31456, 31512, 31562, 31576, 31594, 31596, 31650, 31652, 31664, 31674, 31710, 31727, 31748, 31760, 31883, 31962, 32108, 32168, 32190, 32244, 32276, 32342, 32343, 32344, 32372, 32409, 32415, 32419, 32445, 32499, 32513, 32519, 32573, 32668, 32747, 32776, 32829, 32835, 32856, 32858, 32880, 33055, 33062, 33130, 33162, 33242, 33306, 33340, 33383, 33388, 33412, 33443, 33505, 33506, 33510, 33626, 33694, 33722, 33752, 33768, 33789, 33824, 34010, 34048, 34050, 34058, 34122, 34188, 34352, 34385, 34404, 34406, 34430, 34500, 34542, 34583, 34660, 34677, 34678, 34707, 34750, 34756, 34802, 34824, 34861, 34920, 34942, 35032, 35062, 35064, 35068, 35136, 35205, 35234, 35236, 35248, 35310, 35326, 35382, 35464, 35474, 35480, 35482, 35504, 35606, 35616, 35916, 36046, 36047, 36065, 36104, 36126, 36174, 36214, 36268, 36363, 36417, 36446, 36550, 36599, 36714, 36730, 36744, 36818, 36839, 36900, 36934, 37026, 37038, 37060, 37062, 37118, 37124, 37160, 37168, 37281, 37347, 37358, 37373, 37397, 37427, 37450, 37468, 37469, 37546, 37552, 37557, 37590, 37680, 37734, 37816, 37834, 37838, 38022, 38024, 38052, 38184, 38250, 38315, 38370, 38374, 38408, 38488, 38520, 38526, 38577, 38586, 38598, 38605, 38626, 38658, 38700, 38760, 38920, 38932, 39031, 39184, 39208, 39260, 39281, 39316, 39327, 39329, 39342, 39355, 39373, 39377, 39378, 39411, 39423, 39425, 39546, 39561, 39631, 39639, 39656, 39683, 39804, 39832, 39848, 39863, 39943, 39945, 39978, 40022, 40144, 40280, 40378, 40386, 40466, 40589, 40660, 40704, 40720, 40752, 40852, 40882, 40976, 41016, 41038, 41060, 41094, 41180, 41205, 41229, 41270, 41276, 41284, 41334, 41339, 41349, 41358, 41396, 41426, 41509, 41538, 41556, 41626, 41742, 41882, 41894, 41897, 41904, 41949, 41950, 41998, 42020, 42029, 42112, 42121, 42180, 42199, 42255, 42317, 42337, 42364, 42428, 42434, 42472, 42503, 42504, 42526, 42554, 42566, 42658, 42703, 42782, 42787, 42826, 42828, 42854, 42866, 42914, 42941, 42973, 42986, 42995, 43012, 43069, 43109, 43174, 43208, 43454, 43537, 43562, 43588, 43658, 43670, 43702, 43897, 43950, 43986, 44072, 44095, 44101, 44149, 44157, 44172, 44253, 44262, 44294, 44328, 44340, 44378, 44442, 44456, 44484, 44534, 44552, 44690, 44698, 44827, 44848, 44853, 44865, 44903, 44959, 44961, 44969, 45005, 45043, 45056, 45122, 45143, 45185, 45238, 45250, 45352, 45422, 45446, 45458, 45502, 45520, 45530, 45575, 45587, 45602, 45615, 45616, 45666, 45692, 45749, 45761, 45784, 45801, 45813, 45868, 45875, 45888, 45933, 45968, 45982, 46078, 46088, 46146, 46187, 46247, 46248, 46269, 46288, 46298, 46314, 46316, 46354, 46357, 46368, 46373, 46404, 46406, 46412, 46432, 46435, 46458, 46689, 46726, 46815, 46857, 46941, 46976, 47008, 47022, 47034, 47094, 47159, 47217, 47227, 47247, 47264, 47317, 47340, 47376, 47479, 47548, 47597, 47600, 47689, 47690, 47737, 47759, 47762, 47781, 47825, 47844, 47845, 47918, 47926, 47936, 47951, 47962, 48102, 48258, 48272, 48352, 48360, 48397, 48512, 48524, 48594, 48649, 48662, 48681, 48786, 48930, 48933, 48957, 48966, 49001, 49002, 49005, 49009, 49012, 49050, 49067, 49192, 49217, 49300, 49464, 49487, 49488, 49500, 49514, 49541, 49543, 49549, 49563, 49573, 49656, 49740, 49744, 49841, 49859, 49889, 49890, 49892, 49893, 49895, 49955, 49985, 50120, 50212, 50236, 50239, 50246, 50320, 50329, 50359, 50369, 50414, 50426, 50431, 50446, 50473, 50514, 50522, 50560, 50572, 50632, 50714, 50819, 50841, 50916, 51106, 51158, 51230, 51248, 51280, 51300, 51337, 51346, 51416, 51464, 51466, 51522, 51740, 51764, 51794, 51944, 51963, 51986, 51988, 51990, 52048, 52089, 52129, 52138, 52168, 52210, 52218, 52236, 52280, 52294, 52324, 52394, 52424, 52674, 52707, 52769, 52800, 52851, 52870, 52899, 52907, 52932, 52938, 52953, 52968, 52975, 52981, 53015, 53063, 53156, 53216, 53396, 53470, 53476, 53547, 53552, 53570, 53578, 53612, 53680, 53694, 53784, 53806, 53867, 53872, 53902, 53910, 53976, 53999, 54074, 54097, 54178, 54195, 54264, 54296, 54378, 54452, 54461, 54506, 54554, 54576, 54586, 54628, 54782, 54834, 54858, 54880, 54960, 55028, 55060, 55116, 55168, 55188, 55206, 55294, 55340, 55438, 55505, 55513, 55531, 55729, 55739, 55758, 55792, 55804, 55876, 55886, 56014, 56066, 56081, 56090, 56220, 56224, 56268, 56292, 56312, 56380, 56397, 56452, 56464, 56480, 56662, 56666, 56672, 56774, 56842, 56914, 57021, 57041, 57076, 57082, 57088, 57256, 57271, 57295, 57311, 57403, 57486, 57566, 57624, 57662, 57718, 57728, 57764, 57808, 57972, 57982, 58048, 58050, 58080, 58101, 58236, 58258, 58344, 58464, 58539, 58560, 58595, 58648, 58653, 58802, 58803, 58832, 58871, 58892, 59312, 59344, 59401, 59418, 59653, 59701, 59719, 59720, 59726, 59731, 59747, 59783, 59784, 59915]\n"
     ]
    }
   ],
   "source": [
    "predictions = model.predict(x_train[0:60000,:,:])\n",
    "err=[]\n",
    "for i in range (0,60000):\n",
    "    if (predictions[i].argmax()!=y_train[i]):\n",
    "        err.append(i)\n",
    "print(err)\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
